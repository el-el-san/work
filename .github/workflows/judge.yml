name: Judge PRs

on:
  pull_request:
    types: [opened, reopened, synchronize]
  issue_comment:
    types: [created]

permissions:          # ← merge に必要
  contents: write
  pull-requests: write
  issues: write

jobs:
  judge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;

            /* ----- trigger 判定 ----- */
            const body = github.event.comment?.body?.trim() ?? '';
            const commentTrigger =
              github.event_name === 'issue_comment' && body.startsWith('/judge');

            const { data: openPRs } =
              await github.rest.pulls.list({ owner, repo, state: 'open' });
            const autoTrigger =
              github.event_name === 'pull_request' && openPRs.length >= 3;

            if (!commentTrigger && !autoTrigger) {
              core.info('Judging conditions not met.');
              return;
            }

            /* ----- 採点 ----- */
            const scored = await Promise.all(
              openPRs.map(async pr => {
                const { data: files } = await github.rest.pulls.listFiles({
                  owner, repo, pull_number: pr.number
                });
                const total = files.reduce(
                  (sum, f) => sum + f.additions + f.deletions, 0
                );
                return { pr, score: total };
              })
            );

            if (scored.length === 0) {
              core.info('No open PRs.');
              return;
            }

            scored.sort((a, b) => a.score - b.score);
            const winner = scored[0].pr;
            core.info(`🏆 #${winner.number} wins (score=${scored[0].score})`);

            try {
              await github.rest.pulls.merge({
                owner, repo, pull_number: winner.number, merge_method: 'squash'
              });
              await github.rest.issues.createComment({
                owner, repo, issue_number: winner.number,
                body: 'This PR was automatically judged as the best and merged.'
              });
            } catch (err) {
              core.setFailed(`❌ Failed to merge #${winner.number}: ${err.message}`);
            }
