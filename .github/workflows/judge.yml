name: Judge PRs

on:
  pull_request:
    types: [opened, reopened, synchronize]
  issue_comment:
    types: [created]

jobs:
  judge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;

            async function listOpenPRs() {
              const { data } = await github.rest.pulls.list({ owner, repo, state: 'open' });
              return data;
            }

            const commentTrigger = github.event_name === 'issue_comment' && github.event.comment.body.trim() === startsWith('/judge');
            const openPRs = await listOpenPRs();
            const autoTrigger = github.event_name === 'pull_request' && openPRs.length >= 3;

            if (!commentTrigger && !autoTrigger) {
              core.info('Judging conditions not met.');
              return;
            }

            async function scorePR(pr) {
              const { data: files } = await github.rest.pulls.listFiles({ owner, repo, pull_number: pr.number });
              const stats = files.reduce((acc, f) => { return { additions: acc.additions + f.additions, deletions: acc.deletions + f.deletions }; }, { additions: 0, deletions: 0 });
              return stats.additions + stats.deletions; // lower is better
            }

            const scored = [];
            for (const pr of openPRs) {
              const score = await scorePR(pr);
              scored.push({ pr, score });
            }
            if (scored.length === 0) {
              core.info('No open PRs.');
              return;
            }

            scored.sort((a, b) => a.score - b.score);
            const winner = scored[0].pr;
            await github.rest.pulls.merge({ owner, repo, pull_number: winner.number, merge_method: 'squash' });
            await github.rest.issues.createComment({ owner, repo, issue_number: winner.number, body: 'This PR was automatically judged as the best and merged.' });
